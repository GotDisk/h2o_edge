/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2020-05-12T01:30:20.965Z
  3.30.0.1
  
  Standalone prediction code with sample test data for DeepLearningModel named DeepLearning_model_R_1589245502874_1

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http:/localhost/127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http:/localhost/127.0.0.1:54321/3/Models.java/DeepLearning_model_R_1589245502874_1 > DeepLearning_model_R_1589245502874_1.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m DeepLearning_model_R_1589245502874_1.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="DeepLearning_model_R_1589245502874_1", algorithm="deeplearning")
public class DeepLearning_model_R_1589245502874_1 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.AutoEncoder; }
  public boolean isSupervised() { return false; }
  public int nfeatures() { return 5; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[5];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = new double[5];
    static {
      NORMMUL_0.fill(VALUES);
    }
    static final class NORMMUL_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 0.044238193033324096;
        sa[1] = 0.036498785637507435;
        sa[2] = 0.041647429775661625;
        sa[3] = 0.049235686693102375;
        sa[4] = 0.04151525144670784;
      }
    }
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = new double[5];
    static {
      NORMSUB_0.fill(VALUES);
    }
    static final class NORMSUB_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = -0.006631794058351269;
        sa[1] = 1.7729433255930662;
        sa[2] = 0.35939995307311706;
        sa[3] = -2.0642159543683096;
        sa[4] = -1.8409699941443076;
      }
    }
}
  // Offset into the workspace for categorical variables.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {5,3,1,3,5};
    public int getPredsSize() { return 5; }
    public boolean isAutoEncoder() { return true; }
    public String getHeader() { return "reconstr_C1,reconstr_C2,reconstr_C3,reconstr_C4,reconstr_C5"; }
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ new double[5],
      /* Tanh */ new double[3],
      /* Tanh */ new double[1],
      /* Tanh */ new double[3],
      /* Tanh */ new double[5]
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ DeepLearning_model_R_1589245502874_1_Bias_0.VALUES,
      /* Tanh */ DeepLearning_model_R_1589245502874_1_Bias_1.VALUES,
      /* Tanh */ DeepLearning_model_R_1589245502874_1_Bias_2.VALUES,
      /* Tanh */ DeepLearning_model_R_1589245502874_1_Bias_3.VALUES,
      /* Tanh */ DeepLearning_model_R_1589245502874_1_Bias_4.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ DeepLearning_model_R_1589245502874_1_Weight_0.VALUES,
      /* Tanh */ DeepLearning_model_R_1589245502874_1_Weight_1.VALUES,
      /* Tanh */ DeepLearning_model_R_1589245502874_1_Weight_2.VALUES,
      /* Tanh */ DeepLearning_model_R_1589245502874_1_Weight_3.VALUES,
      /* Tanh */ DeepLearning_model_R_1589245502874_1_Weight_4.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_DeepLearning_model_R_1589245502874_1.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* C1 */ null,
    /* C2 */ null,
    /* C3 */ null,
    /* C4 */ null,
    /* C5 */ null
  };

  public DeepLearning_model_R_1589245502874_1() { super(NAMES,DOMAINS,null); }
  public String getUUID() { return Long.toString(3505290317395162014L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : (data[i] - NORMSUB.VALUES[i])*NORMMUL.VALUES[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<=ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, reconstructed NaN.");
          preds[r] = ACTIVATION[i][r];
        }
        for (int k=0; k<5; ++k) {
          preds[k] = preds[k] / NORMMUL.VALUES[k-0] + NORMSUB.VALUES[k-0];
        }
      }
    }
    return preds;
  }
}
// Neuron bias values for Input layer
class DeepLearning_model_R_1589245502874_1_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class DeepLearning_model_R_1589245502874_1_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[3];
  static {
    DeepLearning_model_R_1589245502874_1_Bias_1_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1589245502874_1_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.6379762634885012E-5;
      sa[1] = -0.12091651632893724;
      sa[2] = 0.004846239820953127;
    }
  }
}
// Neuron bias values for Tanh layer
class DeepLearning_model_R_1589245502874_1_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[1];
  static {
    DeepLearning_model_R_1589245502874_1_Bias_2_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1589245502874_1_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0759837885573353;
    }
  }
}
// Neuron bias values for Tanh layer
class DeepLearning_model_R_1589245502874_1_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[3];
  static {
    DeepLearning_model_R_1589245502874_1_Bias_3_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1589245502874_1_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 2.0958711630268096E-4;
      sa[1] = 3.279736314318522E-5;
      sa[2] = 0.042326890738128585;
    }
  }
}
// Neuron bias values for Tanh layer
class DeepLearning_model_R_1589245502874_1_Bias_4 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    DeepLearning_model_R_1589245502874_1_Bias_4_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1589245502874_1_Bias_4_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.032872140134745605;
      sa[1] = -0.0038809849511993915;
      sa[2] = 0.03790902686883347;
      sa[3] = -0.007761476096432135;
      sa[4] = -0.02119223361506121;
    }
  }
}
class DeepLearning_model_R_1589245502874_1_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class DeepLearning_model_R_1589245502874_1_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[15];
  static {
    DeepLearning_model_R_1589245502874_1_Weight_1_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1589245502874_1_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 5.6948193E-5f;
      sa[1] = -8.02246E-5f;
      sa[2] = 7.8134544E-5f;
      sa[3] = 3.6117726E-5f;
      sa[4] = -1.12590915E-5f;
      sa[5] = 1.1974783f;
      sa[6] = 4.2251735f;
      sa[7] = 1.1504729f;
      sa[8] = -1.7085379f;
      sa[9] = -1.5696772f;
      sa[10] = -0.25877562f;
      sa[11] = 1.4279133f;
      sa[12] = -0.5273381f;
      sa[13] = -0.9705428f;
      sa[14] = 0.7675608f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class DeepLearning_model_R_1589245502874_1_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[3];
  static {
    DeepLearning_model_R_1589245502874_1_Weight_2_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1589245502874_1_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -3.5060744E-5f;
      sa[1] = 1.360931f;
      sa[2] = -1.4479139f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class DeepLearning_model_R_1589245502874_1_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[3];
  static {
    DeepLearning_model_R_1589245502874_1_Weight_3_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1589245502874_1_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 4.9390516f;
      sa[1] = 6.8151855f;
      sa[2] = -1.2348701f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class DeepLearning_model_R_1589245502874_1_Weight_4 implements java.io.Serializable {
  public static final float[] VALUES = new float[15];
  static {
    DeepLearning_model_R_1589245502874_1_Weight_4_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1589245502874_1_Weight_4_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.32322147f;
      sa[1] = 1.1964542f;
      sa[2] = 1.7245798f;
      sa[3] = 0.47047663f;
      sa[4] = 0.17178468f;
      sa[5] = 0.5499556f;
      sa[6] = -0.021256257f;
      sa[7] = -1.2051347f;
      sa[8] = -1.8499187f;
      sa[9] = 0.19480903f;
      sa[10] = -0.7244438f;
      sa[11] = -0.8146376f;
      sa[12] = 0.91453844f;
      sa[13] = 0.5975452f;
      sa[14] = 2.076066f;
    }
  }
}
// The class representing training column names
class NamesHolder_DeepLearning_model_R_1589245502874_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    NamesHolder_DeepLearning_model_R_1589245502874_1_0.fill(VALUES);
  }
  static final class NamesHolder_DeepLearning_model_R_1589245502874_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "C1";
      sa[1] = "C2";
      sa[2] = "C3";
      sa[3] = "C4";
      sa[4] = "C5";
    }
  }
}



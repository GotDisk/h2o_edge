/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2020-05-07T20:20:27.275Z
  3.30.0.2
  
  Standalone prediction code with sample test data for DeepLearningModel named DeepLearning_model_R_1588882449091_1

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http:/localhost/127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http:/localhost/127.0.0.1:54321/3/Models.java/DeepLearning_model_R_1588882449091_1 > DeepLearning_model_R_1588882449091_1.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m DeepLearning_model_R_1588882449091_1.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="DeepLearning_model_R_1588882449091_1", algorithm="deeplearning")
public class DeepLearning_model_R_1588882449091_1 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 3; }
  public int nclasses() { return 1; }
  // Thread-local workspace for storing categorical input variables.
  final int[] CATS = new int[3];
  // Offset into the workspace for categorical variables.
  public static final int[] CATOFFSETS = {0,5,10,15};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {15,1,1};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ new double[15],
      /* Tanh */ new double[1],
      /* Linear */ new double[1]
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ DeepLearning_model_R_1588882449091_1_Bias_0.VALUES,
      /* Tanh */ DeepLearning_model_R_1588882449091_1_Bias_1.VALUES,
      /* Linear */ DeepLearning_model_R_1588882449091_1_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ DeepLearning_model_R_1588882449091_1_Weight_0.VALUES,
      /* Tanh */ DeepLearning_model_R_1588882449091_1_Weight_1.VALUES,
      /* Linear */ DeepLearning_model_R_1588882449091_1_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_DeepLearning_model_R_1588882449091_1.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* District */ DeepLearning_model_R_1588882449091_1_ColInfo_0.VALUES,
    /* Group */ DeepLearning_model_R_1588882449091_1_ColInfo_1.VALUES,
    /* Age */ DeepLearning_model_R_1588882449091_1_ColInfo_2.VALUES,
    /* Claims */ null
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = null;
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public DeepLearning_model_R_1588882449091_1() { super(NAMES,DOMAINS,"Claims"); }
  public String getUUID() { return Long.toString(-3206339732259075712L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(CATS,0);
    int i = 0, ncats = 0;
    for(; i<3; ++i) {
      if (!Double.isNaN(data[i])) {
        int c = (int) data[i];
        CATS[ncats] = c + CATOFFSETS[i];
      } else {
        CATS[ncats] = CATOFFSETS[i+1]-1;
      }
      ncats++;
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<ncats; ++i) {
      if(CATS[i] >= 0) ACTIVATION[0][CATS[i]] = 1;
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        preds[1] = ACTIVATION[i][0];
        preds[1] = Math.min(1e19, Math.exp(preds[1]));
        if (Double.isNaN(preds[1])) throw new RuntimeException("Predicted regression target NaN!");
      }
    }
    preds[0] = preds[1];
    return preds;
  }
}
// Neuron bias values for Input layer
class DeepLearning_model_R_1588882449091_1_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class DeepLearning_model_R_1588882449091_1_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[1];
  static {
    DeepLearning_model_R_1588882449091_1_Bias_1_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1588882449091_1_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.24301770557490168;
    }
  }
}
// Neuron bias values for Linear layer
class DeepLearning_model_R_1588882449091_1_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[1];
  static {
    DeepLearning_model_R_1588882449091_1_Bias_2_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1588882449091_1_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 2.761571803172539;
    }
  }
}
class DeepLearning_model_R_1588882449091_1_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class DeepLearning_model_R_1588882449091_1_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[15];
  static {
    DeepLearning_model_R_1588882449091_1_Weight_1_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1588882449091_1_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.34846586f;
      sa[1] = 0.20004472f;
      sa[2] = 0.016588736f;
      sa[3] = -0.13763158f;
      sa[4] = 0.05471116f;
      sa[5] = -0.11066224f;
      sa[6] = -0.25853646f;
      sa[7] = -0.4054057f;
      sa[8] = -0.5878665f;
      sa[9] = 0.06146188f;
      sa[10] = 0.015732216f;
      sa[11] = 0.06047788f;
      sa[12] = -0.15947823f;
      sa[13] = 0.5645562f;
      sa[14] = 0.51826555f;
    }
  }
}
// Neuron weights connecting Tanh and Linear layer
class DeepLearning_model_R_1588882449091_1_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[1];
  static {
    DeepLearning_model_R_1588882449091_1_Weight_2_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1588882449091_1_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 3.7044537f;
    }
  }
}
// The class representing training column names
class NamesHolder_DeepLearning_model_R_1588882449091_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    NamesHolder_DeepLearning_model_R_1588882449091_1_0.fill(VALUES);
  }
  static final class NamesHolder_DeepLearning_model_R_1588882449091_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "District";
      sa[1] = "Group";
      sa[2] = "Age";
    }
  }
}
// The class representing column District
class DeepLearning_model_R_1588882449091_1_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    DeepLearning_model_R_1588882449091_1_ColInfo_0_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1588882449091_1_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
    }
  }
}
// The class representing column Group
class DeepLearning_model_R_1588882449091_1_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    DeepLearning_model_R_1588882449091_1_ColInfo_1_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1588882449091_1_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1-1.5l";
      sa[1] = "1.5-2l";
      sa[2] = "<1l";
      sa[3] = ">2l";
    }
  }
}
// The class representing column Age
class DeepLearning_model_R_1588882449091_1_ColInfo_2 implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    DeepLearning_model_R_1588882449091_1_ColInfo_2_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1588882449091_1_ColInfo_2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "25-29";
      sa[1] = "30-35";
      sa[2] = "<25";
      sa[3] = ">35";
    }
  }
}


